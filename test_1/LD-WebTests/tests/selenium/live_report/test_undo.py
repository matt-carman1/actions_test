import pytest
from library import dom, simulate

from helpers.change.columns_action import add_column_by_name
from helpers.change.actions_pane import open_add_compounds_panel, close_add_compounds_panel, open_add_data_panel
from helpers.flows.add_compound import search_by_id
from helpers.selection.modal import OK_BUTTON
from helpers.selection.grid import GRID_HEADER_CELL
from helpers.selection.audit_log import AUDIT_LOG_ACTION, AUDIT_LOG_REVERT_BUTTON, AUDIT_LOG_ITEM
from helpers.selection.notifications import NOTIFICATIONS_FLAG
from helpers.verification.grid import check_for_butterbar, verify_grid_contents
from helpers.verification.audit_log import verify_audit_log_count, verify_audit_log_dates
from helpers.verification.element import verify_is_visible, verify_is_not_visible


@pytest.mark.smoke
@pytest.mark.usefixtures("open_livereport")
@pytest.mark.usefixtures("new_live_report")
def test_undo(selenium):
    """
    Basic smoke test of Undo aka AuditLog

    :param selenium: Selenium Webdriver
    """

    # Check notification flag has proper tooltip.
    simulate.hover(selenium, dom.get_element(selenium, NOTIFICATIONS_FLAG))
    verify_is_visible(selenium, '{} span'.format(NOTIFICATIONS_FLAG), selector_text='History')

    # Check no audit log items yet
    verify_audit_log_count(selenium, 0)

    # Add first Compound by Id
    compound_ids = ['CRA-031137', 'CRA-033619', 'V055685']
    open_add_compounds_panel(selenium)
    search_by_id(selenium, compound_ids[0])
    close_add_compounds_panel(selenium)
    verify_grid_contents(selenium, {'ID': [compound_ids[0]]})

    # Verify AuditLog created
    verify_audit_log_count(selenium, 1)
    verify_is_visible(selenium, AUDIT_LOG_ACTION, 'Added 1 row')

    # Add Column
    open_add_data_panel(selenium)
    add_column_by_name(selenium, 'AlogP')
    check_for_butterbar(selenium, 'Adding columns to LiveReport', visible=False)
    verify_is_visible(selenium, GRID_HEADER_CELL, 'AlogP')

    # Verify AuditLog created
    verify_audit_log_count(selenium, 2)
    verify_is_visible(selenium, AUDIT_LOG_ACTION, 'Added 1 Column')

    # Add last 2 compounds by Id
    open_add_compounds_panel(selenium)
    search_by_id(selenium, ','.join(compound_ids[1:3]))
    close_add_compounds_panel(selenium)
    verify_grid_contents(selenium, {'ID': compound_ids})

    # Verify AuditLogs created
    verify_audit_log_count(selenium, 3)
    verify_is_visible(selenium, AUDIT_LOG_ACTION, 'Added 2 rows')

    # Reverting the audit log 'Added 1 row' generated by search_by_id method on line 36
    revert_a_notification(selenium, 2)
    # Verifying if new log for reverting action is displayed
    verify_is_visible(selenium, AUDIT_LOG_ACTION, 'Removed 1 row')

    # Verifying if the 'Revert' button is not visible anymore on the audit log 'Added 1 row'
    reverted_notif_element = dom.get_element(selenium, AUDIT_LOG_ITEM, 'Added 1 row')
    verify_is_not_visible(reverted_notif_element, AUDIT_LOG_REVERT_BUTTON)

    # Verify row removed
    verify_audit_log_count(selenium, 4)
    verify_grid_contents(selenium, {'ID': compound_ids[1:3]})

    # Verify AuditLog dates are expected dates
    verify_audit_log_dates(selenium, "TODAY")


def revert_a_notification(driver, notification_position):
    """
    Click on the Revert button in the notification panel based on the position of the notification given in the panel
    :param driver: Selenium Webdriver
    :param notification_position: int, position of the notification on the Panel. The top most is notification is 0
                                  and so on.
    """
    revert_button_element = dom.get_elements(driver, AUDIT_LOG_REVERT_BUTTON)
    simulate.click(driver, revert_button_element[int(notification_position)])
    dom.click_element(driver, OK_BUTTON)
